<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAQAAQIVCBsuQxI3XHIXSHiOGEx/lxdIeY8SOF50CR0xRgACAxcAAAAFAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAGFCExHViUpC2L6eoymf//Mpn//zKZ//8ymf//Mpn//zKZ//8ymf//Lo3s7R5cmqoJHTFEAAECCAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAADSpHTC+Q8PEymf//Mpn//zKZ//8ymf//Mpn//zKZ//8ymf//Mpn//zKZ//8ymf//Mpn//zGY
        /v0hZam2BhMgLgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAcYKRIti+fqMpn//zKZ//8vkfP/LoLV/zFtqv8yYY//M12G/zJhj/8xban/LoLV/y+R
        8v8xmP7/Mpn//zKZ//8uju3vDy9PXQEDBgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAHVuYXTKZ//8ymf//MIvl/zhPZf8+P0D/Pz8//z8/P/8/Pz//Pz8//z8/
        P/8+P0D/OU5j/zBvrf8vkvP/Mpn//zKZ//8xlvv7EzxlbgEEBwEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAofdF9Mpn//zKZ//83cKn/Pz8//z8/P/8/Pz//Pz8//z8/
        P/8/Pz//Pz8//z8/P/8/Pz//Pz8//zhQaP8vhNr/MZj+/zKZ//8xlvv7EDNVVgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIHCBcUQ09kIGl7kiqHrsQxmuX/L5Dv/zSG2P8+Qkb/PkBB/ztU
        bP85ZZH/OGud/zllkf87VGz/PkBB/z8/P/8/Pz//Pz8//zxFT/8wf87/Mpn//zKZ//8ujevtCR0wIgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPMTlCOr3d4UPa//9D2v//Q9r//0Pa//89xvT/MJbt/zKS
        8v8ykvD/Mpn//zKZ//8ymf//Mpn//zKZ//8zj+r/OWSP/z4/QP8/Pz//Pz8//zxGT/8wiOD/Mpn//zKZ
        //8iaK6sAwsTAQAAAAAAAAAAAAAAAAAAAAAAAAAACyQqJz3H6etD2v//Q9r//0Pa//9D2v//Q9r//0Pa
        //8+y/f/MJXz/zKZ//8ymf//Mpn//zKZ//8ymf//Mpn//zKZ//8ymf//NYDJ/z5DSP8/Pz//Pz8//zhS
        bP8xlvv/Mpn//zGY/f0PL1AxAAAAAAAAAAAAAAAAAAAAAAQOEQszqMXKQ9r//0Pa//8/yev/OoSW/zqD
        lv8/yev/Q9r//0Pa//86u/H/MJX5/zKZ/+UymP+cMZj/gTGZ/5kxmf/kMpn//zKZ//8ymf//NYDJ/z4/
        QP8/Pz//Pz8//zN4vf8ymf//Mpn//yJrspkAAAAAAAAAAAAAAAACCAoBJXqPk0Pa//9D2v//QdT4/z1k
        bv8/Pz//Pz8//zxkbv9B1Pj/Q9r//0Pa//8nfaGQGlGDAQAAAAAAAAAAAAAAACBmqgUxmf99Mpj//TKZ
        //8ymf//OWSP/z8/P/8/Pz//OVJq/zGY/v8ymf//LYzp6QQPGRAAAAAAAAAAABNBTC5C2P38Q9r//0LY
        /f88hpj/Pz8//z8/P/8/Pz//Pz8//zyGmP9C2P3/Q9r//0DR9fUROEIYAAAAAAAAAAAAAAAAAAAAAAAA
        AAAlcr6EMpn//zKZ//8zj+r/PkBB/z8/P/8+P0D/MY7q/zKZ//8ymf//KHvN1AgbLS8AAAAAMqXBcEPa
        //9D2v//P7HN/z5BQv8/Pz//Pz8//z8/P/8/Pz//PkFC/z+xzf9D2v//Q9r//y6Vr1MAAAAAAAAAAAAA
        AAAAAAAABA0WAyVzwMUymf//Mpn//zKZ//87VGz/Pz8//z8/P/81fML/Mpn//zKZ//8ymf//KoLZ3AcY
        KAtFzO17Q9r//0Pa//9Bma7/Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//QZmu/0Pa//9D2v//Q8jqXgAA
        AAAAAAAAAAAAAAAAAAAVQW05Mpn//zKZ//8wkvP/MWed/zpKW/8/Pz//Pz8//zhQaP8xZ53/MJLz/zKZ
        //8ymf//HVmUVU7G5FBD2v//Q9r//0LX/P9Bn7b/QGx3/z8/P/8/Pz//P1ti/0Gftv9C1/z/Q9r//0Ta
        //9KutYzAAAAAAAAAAAAAAAAAAAAACZ1w18ymf//Mpn//zZxq/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/
        P/82cav/Mpn//zKZ//8vkfF7O4ibBVXd/9VD2v//Q9r//0Pa//9BrMb/Pz8//z8/P/8+XWX/Qtn+/0Pa
        //9D2v//UNHwugAAAAAAAAAAAAAAAAAAAAAAAAAAKoHYUTKZ//8ymf//NIfY/z5BQ/8/Pz//Pz8//z8/
        P/8/Pz//PkFD/zSH2P8ymf//Mpn//zGY/m0AAAAAWMHbHlze/8lD2v//Q9r//0LO8P8/QEH/Pz8//z5A
        QP8/wN//Q9r//0Pa//8nfZKPAwkKBAAAAAAAAAAAAAAAAAAAAAAhZqwRMpj+8zKZ//8ymf//N3Gq/z8/
        P/8/Pz//Pz8//z8/P/83car/Mpn//zKZ//8ymP/8KoHYJQAAAAAAAAAARJyyAUrb/+VD2v//Q9r//0Bp
        c/8/Pz//Pz8//z1zgf9C2Pz/Q9r//0LZ/v4icYWTAgcJGQAAAAUAAAAAAAAABQMKERUhZp6UMpn//zKZ
        //8ymP7/Olt7/z8/P/8/Pz//Olt7/zKY/v8ymf//Mpn//zKZ/4YAAAAAAAAAAAAAAAAAAAAAVt3/kEPa
        //9D2v//Qa7J/z8/P/8/Pz//PkBA/zydtP9C2f3/Q9r//0Pa//88xebpKYadrSJxhJoqiaCvPcbo6kLZ
        //83r///Mpn//zKZ//8ylff/N3Ov/zdzr/8ylff/Mpn//zKZ//8xmP/BImiuAwAAAAAAAAAAAAAAAAAA
        AABSu9YnR9r//EPa//9D2f7/QG14/z8/P/8/Pz//PkRF/zuasf9B1Pj/Q9r//0Pa//9D2v//Q9r//0Pa
        //9D2v//Q9r//0LW//80o///Mpn//zKZ//8ymf//Mpn//zKZ//8ymf//MZn/6CqF3hoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABZ3f+gQ9r//0Pa//9CzO7/P1FV/z8/P/8/Pz//PkBA/ztue/88tNH/P87x/0LW
        +/9C2f7/Qtb7/z/O8f88uNf/PLva/0DQ/f81pf//Mpn//zKZ//8ymf//Mpn//zKY/9wuj/AwAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAE+xyhZP3P/pQ9r//0Pa//9CwuL/P1FV/z8/P/8/Pz//Pz8//z5A
        QP88WWD/O257/zp1hP87bnv/PFlg/z5AQP8+Q0T/P7LO/0LZ//8+yf//Nqv3uDGZ/3ovkPFOIGSoBQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF/W9ERL2//6Q9r//0Pa//9Cy+3/QGt2/z8/
        P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/9Blqv/Q9r//0Pa//9I2Px8AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGPd/FlM2//6Q9r//0Pa
        //9C2f7/QazG/0BncP8/QED/Pz8//z8/P/8/Pz//Pz8//z8/P/8/QED/QGlz/0LN7/9D2v//Q9r//1XX
        91kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGLY
        9kZU3f/rQ9r//0Pa//9D2v//Q9r//0LM7v9BqcP/QZSo/0GNoP9BlKn/QanD/0LM7v9D2v//Q9r//0Pa
        //9Q3P/lR6G4CwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFW50xhh3/+lT9z//UPa//9D2v//Q9r//0Pa//9D2v//Q9r//0Pa//9D2v//Q9r//0Pa
        //9D2v//U93/7mHX9TkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABaxuEsZN//lljd/+lP3P//SNv//0Ta//9D2v//RNr//0jb
        //9P3P//Wd7/5mTg/5BXwdwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO4GSAlK0zC1h0/BbZ+D/dmjg
        /35o4P91YdPwWVOzzCo7gZMBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////wAf//4AB//8AAP/+AAA//gAAH/4AAB/wAAAP4AAAB8AA
        AAeAAAAHAAOAAwAD4AEAA8AAAAPAAAADwAAAB8AAgAPAAMAAgAHgAAAB4AAAA/AAAAfwAAAP+AAAf/wA
        AH/+AAB//wAA///AAf//8Af///////////8=
</value>
  </data>
</root>